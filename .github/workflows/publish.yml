name: Publish Packages

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to publish (e.g., v2.3.1)'
        required: true
        type: string

jobs:
  publish:
    name: Publish to registries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || '' }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install Python build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Extract version from tag
        id: version
        run: |
          # Handle both release events and manual triggers
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            tag="${{ github.event.inputs.tag }}"
          else
            tag=${GITHUB_REF#refs/tags/}
          fi

          version=${tag#v}  # Remove 'v' prefix

          # Convert version for Python (2.1.1-rc.2 -> 2.1.1rc2)
          python_version=$(echo $version | sed 's/-rc\.//g; s/-rc/rc/')

          echo "version=$version" >> $GITHUB_OUTPUT
          echo "python_version=$python_version" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT

          echo "Git tag: $tag"
          echo "Cargo/npm version: $version"
          echo "Python version: $python_version"

      - name: Update package versions
        run: |
          version="${{ steps.version.outputs.version }}"
          python_version="${{ steps.version.outputs.python_version }}"

          # Update Cargo.toml
          sed -i "s/^version = .*/version = \"$version\"/" Cargo.toml

          # Update npm package.json
          cd npm-package
          current_version=$(node -p "require('./package.json').version")
          if [ "$current_version" != "$version" ]; then
            npm version --no-git-tag-version $version
          fi
          cd ..

          # Update Python package
          sed -i "s/^version = .*/version = \"$python_version\"/" pip-package/pyproject.toml
          sed -i "s/__version__ = .*/__version__ = \"$python_version\"/" pip-package/uncomment/__init__.py

          echo "Updated versions:"
          grep "^version" Cargo.toml
          grep "\"version\"" npm-package/package.json
          grep "^version" pip-package/pyproject.toml

      - name: Publish to crates.io
        run: |
          cargo publish --allow-dirty --token ${{ secrets.CARGO_TOKEN }}

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd npm-package
          # Determine npm tag based on version
          version="${{ steps.version.outputs.version }}"
          if [[ "$version" == *"-rc."* ]]; then
            npm_tag="beta"
          else
            npm_tag="latest"
          fi

          npm publish --access public --tag $npm_tag

      - name: Build Python package
        run: |
          cd pip-package
          python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          cd pip-package
          # Determine PyPI repository based on version
          version="${{ steps.version.outputs.python_version }}"
          if [[ "$version" == *"rc"* ]]; then
            # For RC versions, you might want to use TestPyPI first
            # twine upload --repository testpypi dist/*
            # For now, we'll publish RC to main PyPI but you can change this
            twine upload dist/*
          else
            twine upload dist/*
          fi

      - name: Verify publications
        run: |
          version="${{ steps.version.outputs.version }}"
          python_version="${{ steps.version.outputs.python_version }}"

          echo "âœ… Published versions:"
          echo "  Cargo: $version"
          echo "  npm: $version"
          echo "  PyPI: $python_version"
          echo ""
          echo "ðŸ“¦ Installation commands:"
          echo "  cargo install uncomment --version $version"
          echo "  npm install -g uncomment-cli@$version"
          echo "  pip install uncomment==$python_version"
