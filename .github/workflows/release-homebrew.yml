name: Release with Homebrew

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: uncomment
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: uncomment
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: uncomment.exe
          - os: windows-latest
            target: i686-pc-windows-msvc
            artifact_name: uncomment.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: uncomment
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: uncomment

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo 'CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc' >> $GITHUB_ENV

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create tar.gz for Unix-like systems
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf uncomment-${{ matrix.target }}.tar.gz ${{ matrix.artifact_name }}
          mv uncomment-${{ matrix.target }}.tar.gz ../../../

      - name: Create zip for Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a -tzip uncomment-${{ matrix.target }}.zip ${{ matrix.artifact_name }}
          mv uncomment-${{ matrix.target }}.zip ../../../

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: uncomment-${{ matrix.target }}
          path: |
            uncomment-${{ matrix.target }}.tar.gz
            uncomment-${{ matrix.target }}.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v6

      - name: Extract version
        id: version
        run: |
          tag=${GITHUB_REF#refs/tags/}
          version=${tag#v}
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Create or update release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="${{ steps.version.outputs.tag }}"

          # Check if this is a pre-release
          if [[ "$tag" == *"-rc."* ]]; then
            prerelease_flag="--prerelease"
            title_prefix="Release Candidate"
          else
            prerelease_flag=""
            title_prefix="Release"
          fi

          # Check if release already exists
          if gh release view "$tag" >/dev/null 2>&1; then
            echo "Release $tag already exists, deleting to recreate..."
            gh release delete "$tag" --yes --cleanup-tag
          fi

          # Create release
          gh release create "$tag" \
            $prerelease_flag \
            --title "$title_prefix $tag" \
            --notes "$(cat <<'EOF'
          ## What's Changed

          See the [CHANGELOG](https://github.com/Goldziher/uncomment/releases) for full details.

          ## Installation

          ### Homebrew
          ```bash
          brew tap goldziher/tap
          brew install uncomment
          ```

          ### Rust/Cargo
          ```bash
          cargo install uncomment
          ```

          ### npm
          ```bash
          npm install -g uncomment-cli
          ```

          ### pip
          ```bash
          pip install uncomment
          ```

          ### Direct Download
          Download the appropriate binary for your platform below.
          EOF
          )"

          # Upload binaries
          for artifact in uncomment-*/; do
            files=$(find "$artifact" -name "*.tar.gz" -o -name "*.zip")
            for file in $files; do
              gh release upload "$tag" "$file"
            done
          done

  homebrew:
    name: Update Homebrew Formula
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Update Homebrew formula
        uses: mislav/bump-homebrew-formula-action@v3
        with:
          formula-name: uncomment
          formula-path: Formula/uncomment.rb
          homebrew-tap: Goldziher/homebrew-tap
          download-url: https://github.com/Goldziher/uncomment/archive/${{ needs.release.outputs.tag }}.tar.gz
          commit-message: |
            {{formulaName}} {{version}}

            Created by https://github.com/mislav/bump-homebrew-formula-action
        env:
          COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TOKEN }}
